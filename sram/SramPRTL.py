#=========================================================================
# SRAM RTL with custom low-level interface
#=========================================================================
# This is the SRAM RTL model with our own low-level interface. It contains
# an instance of either a SRAM generated by CACTI memory compiler or a
# generic SRAM RTL model (SramGenericPRTL).
#
# The interface of this module are prefixed by port0_, meaning all reads
# and writes happen through the only port. Multiported SRAMs have ports
# prefixed by port1_, port2_, etc.
#
# The following list describes each port of this module.
#
#  Port Name     Direction  Description
#  -----------------------------------------------------------------------
#  port0_val     I          port enable (1 = enabled)
#  port0_type    I          transaction type, 0 = read, 1 = write
#  port0_idx     I          index
#  port0_wdata   I          write data
#  port0_wben    I          write bit enable (1 = enabled)
#  port0_rdata   O          read data output
#

from pymtl3          import *

from .SramGenericPRTL import SramGenericPRTL

class SramPRTL( Component ):

  def construct( s, num_bits = 32, num_words = 256 ):

    idx_nbits = clog2( num_words )       # address width

    s.port0_val   = InPort ( Bits1 )
    s.port0_type  = InPort ( Bits1 )
    s.port0_idx   = InPort ( mk_bits(idx_nbits) )
    s.port0_wdata = InPort ( mk_bits(num_bits) )
    s.port0_wben  = InPort ( mk_bits(num_bits) )
    s.port0_rdata = OutPort( mk_bits(num_bits) )

    # Inverters

    s.port0_val_bar  = Wire( Bits1 )
    s.port0_type_bar = Wire( Bits1 )

    @s.update
    def inverters():
      s.port0_val_bar  = ~s.port0_val
      s.port0_type_bar = ~s.port0_type

    s.sram = m = SramGenericPRTL( num_bits, num_words )
    connect( m.CE1,  s.clk           )
    connect( m.CSB1, s.port0_val_bar  ) # CSB1 low-active
    connect( m.OEB1, b1(0)            )
    connect( m.WBM1, s.port0_wben     )
    connect( m.WEB1, s.port0_type_bar ) # WEB1 low-active
    connect( m.A1,   s.port0_idx      )
    connect( m.I1,   s.port0_wdata    )
    connect( m.O1,   s.port0_rdata    )

  def line_trace( s ):
    return s.sram.line_trace()
